{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_tg$initDataUnsafe3","_tg$initDataUnsafe3$u","count","setCount","useState","isReady","setIsReady","error","setError","useEffect","window","Telegram","WebApp","tg","ready","setTimeout","isExpanded","version","_tg$initDataUnsafe","_tg$initDataUnsafe$us","initData","JSON","stringify","event","timestamp","Date","toISOString","user_id","initDataUnsafe","user","id","console","log","sendData","err","concat","message","warn","handleSendData","_tg$initDataUnsafe2","_tg$initDataUnsafe2$u","testData","userAction","dataStr","showAlert","React","MainButton","setText","show","onClick","offClick","createElement","className","src","logo","alt","style","color","incrementCount","prevCount","Fragment","platform","href","target","rel","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2f837dc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check if we're in Telegram Web App environment\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n\n      try {\n        tg.ready();\n        setIsReady(true);\n\n        // Wait a bit before sending data to ensure WebApp is fully ready\n        setTimeout(() => {\n          if (tg.isExpanded || tg.version) {\n            const initData = JSON.stringify({\n              event: \"app_loaded\",\n              timestamp: new Date().toISOString(),\n              user_id: tg.initDataUnsafe?.user?.id || \"unknown\",\n            });\n            console.log(\"Attempting to send data to bot (on load):\", initData);\n            tg.sendData(initData);\n          }\n        }, 1000);\n      } catch (err) {\n        setError(`WebApp initialization error: ${err.message}`);\n        console.error(\"WebApp error:\", err);\n      }\n    } else {\n      setError(\"Not running in Telegram WebApp environment\");\n      console.warn(\"Telegram WebApp not available\");\n    }\n  }, []);\n\n  const handleSendData = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const testData = {\n        message: \"Hello from React Mini App!\",\n        timestamp: new Date().toISOString(),\n        userAction: \"button_click\",\n        user_id: tg.initDataUnsafe?.user?.id || \"unknown\",\n      };\n\n      try {\n        const dataStr = JSON.stringify(testData);\n        console.log(\"Attempting to send data from button click:\", dataStr);\n        tg.sendData(dataStr);\n\n        // Also try showing notification\n        tg.showAlert(\"Data sent to bot!\");\n      } catch (err) {\n        console.error(\"Error sending data:\", err);\n        setError(`Send error: ${err.message}`);\n      }\n    } else {\n      console.error(\"Telegram WebApp not available\");\n      setError(\"Telegram WebApp not available\");\n    }\n  };\n\n  // Initialize SDK features\n  React.useEffect(() => {\n    if (\n      isReady &&\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      try {\n        const tg = window.Telegram.WebApp;\n\n        // Initialize the MainButton\n        tg.MainButton.setText(\"Send Data to Bot\");\n        tg.MainButton.show();\n        tg.MainButton.onClick(handleSendData);\n\n        return () => {\n          tg.MainButton.offClick(handleSendData);\n        };\n      } catch (err) {\n        console.error(\"MainButton setup error:\", err);\n      }\n    }\n  }, [isReady]);\n\n  const incrementCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const tg =\n    typeof window !== \"undefined\" && window.Telegram && window.Telegram.WebApp\n      ? window.Telegram.WebApp\n      : null;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n\n        {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n        {!isReady && !error && <p>Initializing Telegram WebApp...</p>}\n        {isReady && <p style={{ color: \"green\" }}>âœ… WebApp Ready!</p>}\n\n        <button onClick={handleSendData}>Send Test Data to Backend</button>\n\n        <div>\n          <p>Count: {count}</p>\n          <button onClick={incrementCount}>Increment Count</button>\n        </div>\n\n        {tg && (\n          <>\n            <p>Telegram WebApp Version: {tg.version}</p>\n            <p>Platform: {tg.platform}</p>\n            <p>User ID: {tg.initDataUnsafe?.user?.id || \"Not available\"}</p>\n          </>\n        )}\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}