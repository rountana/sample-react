{"version":3,"sources":["App.js","reportWebVitals.js","index.js","logo.svg"],"names":["App","tg","window","Telegram","WebApp","count","setCount","useState","useEffect","ready","sendData","JSON","stringify","event","timestamp","Date","toISOString","handleSendData","testData","message","userAction","console","log","React","MainButton","setText","show","onClick","offClick","createElement","className","src","logo","alt","incrementCount","prevCount","version","platform","href","target","rel","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"8NA0EeA,MArEf,WACE,MAAMC,EAAKC,OAAOC,SAASC,QACpBC,EAAOC,GAAYC,mBAAS,GAEnCC,oBAAU,KACRP,EAAGQ,QAEHR,EAAGS,SACDC,KAAKC,UAAU,CACbC,MAAO,aACPC,WAAW,IAAIC,MAAOC,kBAGzB,CAACf,IAEJ,MAAMgB,EAAiBA,KACrB,MAAMC,EAAW,CACfC,QAAS,6BACTL,WAAW,IAAIC,MAAOC,cACtBI,WAAY,gBAEdC,QAAQC,IAAI,8BAA+BX,KAAKC,UAAUM,IAC1DjB,EAAGS,SAASC,KAAKC,UAAUM,KAqB7B,OAjBAK,IAAMf,UAAU,KAEdJ,IAAOoB,WAAWC,QAAQ,oBAC1BrB,IAAOoB,WAAWE,OAClBtB,IAAOoB,WAAWG,QAAQV,GAGnB,KACLb,IAAOoB,WAAWI,SAASX,KAE5B,IAQDM,IAAAM,cAAA,OAAKC,UAAU,OACbP,IAAAM,cAAA,UAAQC,UAAU,cAChBP,IAAAM,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCV,IAAAM,cAAA,SAAG,6CACHN,IAAAM,cAAA,UAAQF,QAASV,GAAgB,6BAEjCM,IAAAM,cAAA,WACEN,IAAAM,cAAA,SAAG,UAAQxB,GACXkB,IAAAM,cAAA,UAAQF,QAbOO,KACrB5B,EAAU6B,GAAcA,EAAY,KAYG,oBAEnCZ,IAAAM,cAAA,SAAG,4BAA0B5B,EAAGmC,SAChCb,IAAAM,cAAA,SAAG,aAAW5B,EAAGoC,UACjBd,IAAAM,cAAA,KACEC,UAAU,WACVQ,KAAK,sBACLC,OAAO,SACPC,IAAI,uBACL,kBCtDMC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnC,IAAAM,cAACN,IAAMoC,WAAU,KACfpC,IAAAM,cAAC7B,EAAG,QAORyC,uBChBAmB,EAAAC,QAAiBjB,EAAAkB,EAAuB","file":"static/js/main.df434163.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\n\nfunction App() {\n  const tg = window.Telegram.WebApp;\n  const [count, setCount] = useState(0); // Add counter state\n\n  useEffect(() => {\n    tg.ready(); // Inform Telegram the app is ready\n    // Optional: Send a test message as soon as the app loads\n    tg.sendData(\n      JSON.stringify({\n        event: \"app_loaded\",\n        timestamp: new Date().toISOString(),\n      })\n    );\n  }, [tg]);\n\n  const handleSendData = () => {\n    const testData = {\n      message: \"Hello from React Mini App!\",\n      timestamp: new Date().toISOString(),\n      userAction: \"button_click\",\n    };\n    console.log(\"Sending data from frontend:\", JSON.stringify(testData)); // For frontend debugging\n    tg.sendData(JSON.stringify(testData));\n  };\n\n  // Initialize SDK features in useEffect\n  React.useEffect(() => {\n    // Initialize the MainButton\n    WebApp.MainButton.setText(\"Send Data to Bot\");\n    WebApp.MainButton.show();\n    WebApp.MainButton.onClick(handleSendData);\n\n    // Optional: Cleanup MainButton event listener when component unmounts\n    return () => {\n      WebApp.MainButton.offClick(handleSendData);\n    };\n  }, []); // Empty dependency array ensures this runs once on mount and cleanup on unmount\n\n  // Function to increment count\n  const incrementCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n        <button onClick={handleSendData}>Send Test Data to Backend</button>\n        {/* Counter Button and Display */}\n        <div>\n          <p>Count: {count}</p>\n          <button onClick={incrementCount}>Increment Count</button>\n        </div>\n        <p>Telegram WebApp Version: {tg.version}</p>\n        <p>Platform: {tg.platform}</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}