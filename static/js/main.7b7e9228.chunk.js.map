{"version":3,"sources":["App.js","reportWebVitals.js","index.js","logo.svg"],"names":["BACKEND_API_ENDPOINT","App","console","log","count","setCount","useState","isReady","setIsReady","error","setError","themeParams","setThemeParams","useEffect","async","backendUrl","dataToSend","init_data","event","platform","timestamp","Date","toISOString","response","fetch","method","headers","Content-Type","body","JSON","stringify","ok","errorData","json","status","Error","concat","message","statusText","result","sendDataToBackend","window","isTelegramEnvironment","Telegram","WebApp","initData","initDataUnsafe","length","query_id","tg","ready","expand","enableClosingConfirmation","MainButton","text","show","onClick","handleSendData","err","warn","_window$Telegram","_window$Telegram$WebA","offClick","hide","testData","userAction","version","then","data","showAlert","catch","sendCountUpdate","newCount","countData","appStyle","backgroundColor","bg_color","color","text_color","minHeight","padding","React","createElement","className","style","src","logo","alt","destructive_text_color","link_color","incrementCount","secondary_bg_color","border","hint_color","borderRadius","cursor","margin","marginTop","section_bg_color","accent_text_color","fontSize","colorScheme","href","target","rel","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.7b7e9228.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\nimport { decycle, retrocycle } from \"json-decycle\";\n\n// Define your backend API endpoint\nconst BACKEND_API_ENDPOINT =\n  \"https://promoting-guarantee-stars-alt.trycloudflare.com\"; // Replace with your actual backend URL if different\n\nfunction App() {\n  console.log(\"App component function body started\"); // <-- DIAGNOSTIC LOG 1\n  const [count, setCount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const [themeParams, setThemeParams] = useState(null);\n\n  const incrementCount = () => {\n    const newCount = count + 1;\n    setCount(newCount);\n\n    // For keyboard button Mini Apps: Send count updates to bot\n    sendCountUpdate(newCount);\n  };\n\n  function getCircularReplacer() {\n    const seen = new WeakSet();\n    return (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  }\n\n  // useEffect(() => {\n  //   if (count > 0) {\n  //     // Avoid sending initial 0 count\n  //     fetch(\"/api/webapp-data\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({ count }),\n  //     })\n  //       .then((response) => response.json())\n  //       .then((data) => console.log(\"Backend response:\", data))\n  //       .catch((error) => {\n  //         console.error(\"Error sending count to backend:\", error);\n  //       });\n  //   }\n  // }, [count]);\n\n  useEffect(() => {\n    console.log(\"useEffect for sendDataToBackend - callback started\"); // <-- DIAGNOSTIC LOG 2\n\n    async function sendDataToBackend() {\n      const backendUrl =\n        \"https://stood-beneficial-withdrawal-sas.trycloudflare.com/api/webapp-data\"; // Your Cloudflare tunnel URL + endpoint\n\n      // Example data to send - adjust as needed\n      const dataToSend = {\n        count: 10, // Replace with your actual count\n        init_data:\n          \"**** Displaying this data means the backend is working ****\", // Replace with actual initData\n        // Add any other data your backend expects, like 'event', 'platform', 'timestamp'\n        event: \"button_click\",\n        platform: \"web\",\n        timestamp: new Date().toISOString(),\n      };\n\n      try {\n        console.log(\"One time check - sending data to backend:\", backendUrl);\n        const response = await fetch(backendUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            // Add any other headers if required, though for this setup, Content-Type is key\n          },\n          body: JSON.stringify(dataToSend),\n        });\n\n        if (!response.ok) {\n          // Handle HTTP errors\n          const errorData = await response.json(); // Or response.text() if not JSON\n          console.error(\"Error from backend:\", response.status, errorData);\n          // You might want to show an error message to the user here\n          throw new Error(\n            `HTTP error! status: ${response.status}, message: ${\n              errorData.message || response.statusText\n            }`\n          );\n        }\n\n        const result = await response.json();\n        console.log(\"Success:\", result);\n        // Process the successful response from your backend\n        // e.g., show a success message, update UI state\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n        // Handle network errors or errors from the !response.ok block\n        // You might want to show an error message to the user here\n      }\n    }\n\n    // Example of how you might call this function:\n    sendDataToBackend();\n  }, []);\n\n  useEffect(() => {\n    // Check if we're in Telegram Web App environment\n    console.log(\"useEffect: Starting environment check.\");\n    console.log(\"useEffect: typeof window:\", typeof window);\n\n    let isTelegramEnvironment = false; // Initialize to false by default\n    if (typeof window !== \"undefined\") {\n      console.log(\"useEffect: window.Telegram:\", window.Telegram);\n      console.log(\"useEffect: window.Telegram.WebApp:\", window.Telegram.WebApp);\n\n      if (window.Telegram && window.Telegram.WebApp) {\n        console.log(\n          \"useEffect: Checking window.Telegram.WebApp.initData:\",\n          window.Telegram.WebApp.initData\n        );\n        console.log(\n          \"useEffect: Checking window.Telegram.WebApp.initDataUnsafe:\",\n          window.Telegram.WebApp.initDataUnsafe\n        );\n\n        // Refined condition: Check for presence of initData and query_id\n        if (\n          window.Telegram.WebApp.initData && // Ensures initData is not empty/null/undefined\n          window.Telegram.WebApp.initData.length > 0 && // Ensures initData is not an empty string\n          window.Telegram.WebApp.initDataUnsafe &&\n          window.Telegram.WebApp.initDataUnsafe.query_id\n        ) {\n          console.log(\n            \"useEffect: window.Telegram.WebApp.initDataUnsafe.query_id:\",\n            window.Telegram.WebApp.initDataUnsafe.query_id\n          );\n          isTelegramEnvironment = true; // Only set to true if these specific conditions are met\n        } else {\n          console.log(\n            \"useEffect: initData is empty or query_id is missing.  NOT true Telegram environment.\"\n          );\n          // isTelegramEnvironment remains false\n        }\n      } else {\n        console.log(\n          \"useEffect: window.Telegram or window.Telegram.WebApp is not defined.\"\n        );\n        // isTelegramEnvironment remains false\n      }\n    }\n    console.log(\n      \"useEffect: isTelegramEnvironment (final value):\",\n      isTelegramEnvironment\n    );\n\n    if (isTelegramEnvironment) {\n      console.log(\n        \"useEffect: Detected Telegram WebApp environment. Initializing...\"\n      );\n      const tg = window.Telegram.WebApp;\n\n      try {\n        tg.ready();\n\n        // Set up theme\n        setThemeParams(tg.themeParams);\n\n        // Expand the app to full height\n        tg.expand();\n\n        // Enable closing confirmation\n        tg.enableClosingConfirmation();\n\n        // Set up main button for keyboard button Mini Apps\n        tg.MainButton.text = \"Test sending data\";\n        tg.MainButton.show();\n        tg.MainButton.onClick(() => handleSendData());\n\n        setIsReady(true);\n\n        // For KEYBOARD BUTTON Mini Apps: Don't auto-send data on load\n        // Let the user explicitly trigger data sending via buttons\n        console.log(\n          \"Mini App loaded and ready for keyboard button interaction\"\n        );\n      } catch (err) {\n        setError(`WebApp initialization error: ${err.message}`);\n        console.error(\"WebApp error:\", err);\n      }\n    } else {\n      console.log(\"useEffect: Did NOT detect Telegram WebApp environment.\");\n      setError(\"Not running in Telegram WebApp environment\");\n      console.warn(\"Telegram WebApp not available\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (window.Telegram?.WebApp?.MainButton) {\n        window.Telegram.WebApp.MainButton.offClick(handleSendData);\n        window.Telegram.WebApp.MainButton.hide();\n      }\n    };\n  }, []);\n\n  // called when the main button is clicked (available in telegram only)\n  const handleSendData = () => {\n    console.log(\"handleSendData called\");\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const testData = {\n        message: \"Hello from React Mini App!\",\n        timestamp: new Date().toISOString(),\n        userAction: \"button_click\",\n        event: \"main_button_click\", // Changed event name for clarity\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      // if (count > 0) {\n      try {\n        console.log(\"Attempting to send data via fetch to backend:\", testData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(testData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Data sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"Data sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending data to backend:\", err);\n            setError(`Send error: ${err.message}`);\n            tg.showAlert(`Error: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing data for backend:\", err);\n        setError(`Client-side send error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    } else {\n      console.error(\"Telegram WebApp not available\");\n      setError(\"Telegram WebApp not available\");\n    }\n  };\n\n  const sendCountUpdate = (newCount) => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const countData = {\n        event: \"count_update\",\n        count: newCount,\n        timestamp: new Date().toISOString(),\n        init_data: tg.initData, // Crucial for backend validation and query_id\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Sending count update via fetch to backend:\", countData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(countData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Count update sent successfully to backend:\", data);\n            // Optionally, provide feedback to the user, though it might be too frequent for count updates\n            // tg.showAlert(data.message || \"Count updated on server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending count update to backend:\", err);\n            // setError might be too intrusive for every count update error\n          });\n      } catch (err) {\n        console.error(\"Error preparing count update for backend:\", err);\n      }\n    }\n  };\n\n  const sendAppLoadedEvent = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const loadData = {\n        event: \"app_loaded\",\n        timestamp: new Date().toISOString(),\n        count: count, // Send current count state\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\n          \"Sending app loaded event via fetch to backend:\",\n          BACKEND_API_ENDPOINT\n        );\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(loadData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"App loaded event sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"App loaded event sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending app loaded event to backend:\", err);\n            setError(`App load event error: ${err.message}`);\n            tg.showAlert(`Error sending app load event: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing app loaded event for backend:\", err);\n        setError(`Client-side app load error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    }\n  };\n\n  const tg =\n    typeof window !== \"undefined\" && window.Telegram && window.Telegram.WebApp\n      ? window.Telegram.WebApp\n      : null;\n\n  // Apply theme-aware styling\n  const appStyle = {\n    backgroundColor: themeParams?.bg_color || \"#ffffff\",\n    color: themeParams?.text_color || \"#000000\",\n    minHeight: \"100vh\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div className=\"App\" style={appStyle}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n\n        {error && (\n          <p style={{ color: themeParams?.destructive_text_color || \"red\" }}>\n            Error: {error}\n          </p>\n        )}\n        {!isReady && !error && <p>Initializing Telegram WebApp...</p>}\n        {isReady && (\n          <p style={{ color: themeParams?.link_color || \"green\" }}>\n            ✅ WebApp Ready!\n          </p>\n        )}\n\n        <div>\n          <p>Count: {count}</p>\n          <button\n            onClick={incrementCount}\n            style={{\n              backgroundColor: themeParams?.secondary_bg_color || \"#f0f0f0\",\n              color: themeParams?.text_color || \"#000000\",\n              border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Increment Count\n          </button>\n\n          {/* <button\n            onClick={sendAppLoadedEvent}\n            style={{\n              backgroundColor: themeParams?.button_color || \"#0088cc\",\n              color: themeParams?.button_text_color || \"#ffffff\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Send App Loaded Event\n          </button> */}\n        </div>\n\n        {/* Keyboard Button Mini App Instructions */}\n        <div\n          style={{\n            marginTop: \"20px\",\n            padding: \"15px\",\n            backgroundColor: themeParams?.section_bg_color || \"#e8f4fd\",\n            borderRadius: \"8px\",\n            border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n          }}\n        >\n          <h4\n            style={{\n              margin: \"0 0 10px 0\",\n              color: themeParams?.accent_text_color || \"#0088cc\",\n            }}\n          >\n            🎯 Keyboard Button Mini App\n          </h4>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • All buttons send data using <code>sendData()</code>\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Count updates are sent automatically to bot\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Use the blue button at bottom to send manual data\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Check your bot logs to see data reception\n          </p>\n        </div>\n\n        {tg && (\n          <div\n            style={{\n              marginTop: \"20px\",\n              padding: \"15px\",\n              backgroundColor: themeParams?.secondary_bg_color || \"#f5f5f5\",\n              borderRadius: \"8px\",\n            }}\n          >\n            <h3>WebApp Info:</h3>\n            <p>Telegram WebApp Version: {tg.version}</p>\n            <p>Platform: {tg.platform}</p>\n            {/* Remove displaying user ID from initDataUnsafe - this should be validated server-side */}\n            <p>Init Data Available: {tg.initData ? \"Yes\" : \"No\"}</p>\n            <p>Theme: {tg.colorScheme}</p>\n          </div>\n        )}\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: themeParams?.link_color || \"#0088cc\" }}\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}