{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","BACKEND_API_ENDPOINT","App","count","setCount","useState","isReady","setIsReady","error","setError","themeParams","setThemeParams","useEffect","window","Telegram","WebApp","tg","ready","expand","enableClosingConfirmation","MainButton","text","show","onClick","handleSendData","console","log","err","concat","message","warn","_window$Telegram","_window$Telegram$WebA","offClick","hide","testData","timestamp","Date","toISOString","userAction","event","init_data","initData","version","platform","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","ok","Error","status","json","data","showAlert","catch","sendCountUpdate","newCount","countData","appStyle","backgroundColor","bg_color","color","text_color","minHeight","padding","React","createElement","className","style","src","logo","alt","destructive_text_color","link_color","incrementCount","secondary_bg_color","border","hint_color","borderRadius","cursor","margin","sendAppLoadedEvent","loadData","button_color","button_text_color","marginTop","section_bg_color","accent_text_color","fontSize","colorScheme","href","target","rel","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a7b694ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\n\n// Define your backend API endpoint\nconst BACKEND_API_ENDPOINT = \"http://localhost:5000\"; // Replace with your actual backend URL if different\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const [themeParams, setThemeParams] = useState(null);\n\n  useEffect(() => {\n    // Check if we're in Telegram Web App environment\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n\n      try {\n        tg.ready();\n\n        // Set up theme\n        setThemeParams(tg.themeParams);\n\n        // Expand the app to full height\n        tg.expand();\n\n        // Enable closing confirmation\n        tg.enableClosingConfirmation();\n\n        // Set up main button for keyboard button Mini Apps\n        tg.MainButton.text = \"Send Data to Bot\";\n        tg.MainButton.show();\n        tg.MainButton.onClick(() => handleSendData());\n\n        setIsReady(true);\n\n        // For KEYBOARD BUTTON Mini Apps: Don't auto-send data on load\n        // Let the user explicitly trigger data sending via buttons\n        console.log(\n          \"Mini App loaded and ready for keyboard button interaction\"\n        );\n      } catch (err) {\n        setError(`WebApp initialization error: ${err.message}`);\n        console.error(\"WebApp error:\", err);\n      }\n    } else {\n      setError(\"Not running in Telegram WebApp environment\");\n      console.warn(\"Telegram WebApp not available\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (window.Telegram?.WebApp?.MainButton) {\n        window.Telegram.WebApp.MainButton.offClick(handleSendData);\n        window.Telegram.WebApp.MainButton.hide();\n      }\n    };\n  }, []);\n\n  const handleSendData = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const testData = {\n        message: \"Hello from React Mini App!\",\n        timestamp: new Date().toISOString(),\n        userAction: \"button_click\",\n        event: \"main_button_click\", // Changed event name for clarity\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Attempting to send data via fetch to backend:\", testData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(testData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Data sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"Data sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending data to backend:\", err);\n            setError(`Send error: ${err.message}`);\n            tg.showAlert(`Error: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing data for backend:\", err);\n        setError(`Client-side send error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    } else {\n      console.error(\"Telegram WebApp not available\");\n      setError(\"Telegram WebApp not available\");\n    }\n  };\n\n  const incrementCount = () => {\n    const newCount = count + 1;\n    setCount(newCount);\n\n    // For keyboard button Mini Apps: Send count updates to bot\n    sendCountUpdate(newCount);\n  };\n\n  const sendCountUpdate = (newCount) => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const countData = {\n        event: \"count_update\",\n        count: newCount,\n        timestamp: new Date().toISOString(),\n        init_data: tg.initData, // Crucial for backend validation and query_id\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Sending count update via fetch to backend:\", countData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(countData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Count update sent successfully to backend:\", data);\n            // Optionally, provide feedback to the user, though it might be too frequent for count updates\n            // tg.showAlert(data.message || \"Count updated on server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending count update to backend:\", err);\n            // setError might be too intrusive for every count update error\n          });\n      } catch (err) {\n        console.error(\"Error preparing count update for backend:\", err);\n      }\n    }\n  };\n\n  const sendAppLoadedEvent = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const loadData = {\n        event: \"app_loaded\",\n        timestamp: new Date().toISOString(),\n        count: count, // Send current count state\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Sending app loaded event via fetch to backend:\", loadData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(loadData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"App loaded event sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"App loaded event sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending app loaded event to backend:\", err);\n            setError(`App load event error: ${err.message}`);\n            tg.showAlert(`Error sending app load event: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing app loaded event for backend:\", err);\n        setError(`Client-side app load error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    }\n  };\n\n  const tg =\n    typeof window !== \"undefined\" && window.Telegram && window.Telegram.WebApp\n      ? window.Telegram.WebApp\n      : null;\n\n  // Apply theme-aware styling\n  const appStyle = {\n    backgroundColor: themeParams?.bg_color || \"#ffffff\",\n    color: themeParams?.text_color || \"#000000\",\n    minHeight: \"100vh\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div className=\"App\" style={appStyle}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n\n        {error && (\n          <p style={{ color: themeParams?.destructive_text_color || \"red\" }}>\n            Error: {error}\n          </p>\n        )}\n        {!isReady && !error && <p>Initializing Telegram WebApp...</p>}\n        {isReady && (\n          <p style={{ color: themeParams?.link_color || \"green\" }}>\n            ✅ WebApp Ready!\n          </p>\n        )}\n\n        <div>\n          <p>Count: {count}</p>\n          <button\n            onClick={incrementCount}\n            style={{\n              backgroundColor: themeParams?.secondary_bg_color || \"#f0f0f0\",\n              color: themeParams?.text_color || \"#000000\",\n              border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Increment Count (Sends Data)\n          </button>\n\n          <button\n            onClick={sendAppLoadedEvent}\n            style={{\n              backgroundColor: themeParams?.button_color || \"#0088cc\",\n              color: themeParams?.button_text_color || \"#ffffff\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Send App Loaded Event\n          </button>\n        </div>\n\n        {/* Keyboard Button Mini App Instructions */}\n        <div\n          style={{\n            marginTop: \"20px\",\n            padding: \"15px\",\n            backgroundColor: themeParams?.section_bg_color || \"#e8f4fd\",\n            borderRadius: \"8px\",\n            border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n          }}\n        >\n          <h4\n            style={{\n              margin: \"0 0 10px 0\",\n              color: themeParams?.accent_text_color || \"#0088cc\",\n            }}\n          >\n            🎯 Keyboard Button Mini App\n          </h4>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • All buttons send data using <code>sendData()</code>\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Count updates are sent automatically to bot\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Use the blue button at bottom to send manual data\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Check your bot logs to see data reception\n          </p>\n        </div>\n\n        {tg && (\n          <div\n            style={{\n              marginTop: \"20px\",\n              padding: \"15px\",\n              backgroundColor: themeParams?.secondary_bg_color || \"#f5f5f5\",\n              borderRadius: \"8px\",\n            }}\n          >\n            <h3>WebApp Info:</h3>\n            <p>Telegram WebApp Version: {tg.version}</p>\n            <p>Platform: {tg.platform}</p>\n            {/* Remove displaying user ID from initDataUnsafe - this should be validated server-side */}\n            <p>Init Data Available: {tg.initData ? \"Yes\" : \"No\"}</p>\n            <p>Theme: {tg.colorScheme}</p>\n          </div>\n        )}\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: themeParams?.link_color || \"#0088cc\" }}\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}