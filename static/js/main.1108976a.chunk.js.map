{"version":3,"sources":["App.js","reportWebVitals.js","index.js","logo.svg"],"names":["BACKEND_API_ENDPOINT","App","count","setCount","useState","isReady","setIsReady","error","setError","themeParams","setThemeParams","useEffect","console","log","window","isTelegramEnvironment","Telegram","WebApp","initData","initDataUnsafe","query_id","tg","ready","expand","enableClosingConfirmation","MainButton","text","show","onClick","handleSendData","err","concat","message","warn","_window$Telegram","_window$Telegram$WebA","offClick","hide","testData","timestamp","Date","toISOString","userAction","event","init_data","version","platform","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","ok","Error","status","json","data","showAlert","catch","appStyle","backgroundColor","bg_color","color","text_color","minHeight","padding","React","createElement","className","style","src","logo","alt","destructive_text_color","link_color","incrementCount","secondary_bg_color","border","hint_color","borderRadius","cursor","margin","marginTop","section_bg_color","accent_text_color","fontSize","colorScheme","href","target","rel","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.1108976a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\nimport { decycle, retrocycle } from \"json-decycle\";\n\n// Define your backend API endpoint\nconst BACKEND_API_ENDPOINT = \"http://localhost:5000\"; // Replace with your actual backend URL if different\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const [themeParams, setThemeParams] = useState(null);\n\n  const incrementCount = () => {\n    const newCount = count + 1;\n    setCount(newCount);\n\n    // For keyboard button Mini Apps: Send count updates to bot\n    // sendCountUpdate(newCount);\n  };\n\n  function getCircularReplacer() {\n    const seen = new WeakSet();\n    return (key, value) => {\n      if (typeof value === \"object\" && value !== null) {\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  }\n\n  // useEffect(() => {\n  //   if (count > 0) {\n  //     // Avoid sending initial 0 count\n  //     fetch(\"/api/webapp-data\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({ count }),\n  //     })\n  //       .then((response) => response.json())\n  //       .then((data) => console.log(\"Backend response:\", data))\n  //       .catch((error) => {\n  //         console.error(\"Error sending count to backend:\", error);\n  //       });\n  //   }\n  // }, [count]);\n\n  useEffect(() => {\n    // Check if we're in Telegram Web App environment\n    console.log(\"useEffect: Starting environment check.\");\n    console.log(\"useEffect: typeof window:\", typeof window);\n\n    let isTelegramEnvironment = false;\n    if (typeof window !== \"undefined\") {\n      console.log(\"useEffect: window.Telegram:\", window.Telegram);\n      console.log(\"useEffect: window.Telegram.WebApp:\", window.Telegram.WebApp);\n\n      if (window.Telegram && window.Telegram.WebApp) {\n        // Add new logs here\n        console.log(\n          \"useEffect: window.Telegram.WebApp.initData:\",\n          window.Telegram.WebApp.initData\n        );\n        console.log(\n          \"useEffect: window.Telegram.WebApp.initDataUnsafe:\",\n          window.Telegram.WebApp.initDataUnsafe\n        );\n        if (window.Telegram.WebApp.initDataUnsafe) {\n          console.log(\n            \"useEffect: window.Telegram.WebApp.initDataUnsafe.query_id:\",\n            window.Telegram.WebApp.initDataUnsafe.query_id\n          );\n        } else {\n          console.log(\n            \"useEffect: window.Telegram.WebApp.initDataUnsafe is undefined/null\"\n          );\n        }\n        // Original logic for setting isTelegramEnvironment (we will refine this later)\n        isTelegramEnvironment = true;\n      }\n    }\n    console.log(\"useEffect: isTelegramEnvironment:\", isTelegramEnvironment);\n\n    if (isTelegramEnvironment) {\n      console.log(\n        \"useEffect: Detected Telegram WebApp environment. Initializing...\"\n      );\n      const tg = window.Telegram.WebApp;\n\n      try {\n        tg.ready();\n\n        // Set up theme\n        setThemeParams(tg.themeParams);\n\n        // Expand the app to full height\n        tg.expand();\n\n        // Enable closing confirmation\n        tg.enableClosingConfirmation();\n\n        // Set up main button for keyboard button Mini Apps\n        tg.MainButton.text = \"Test sending data\";\n        tg.MainButton.show();\n        tg.MainButton.onClick(() => handleSendData());\n\n        setIsReady(true);\n\n        // For KEYBOARD BUTTON Mini Apps: Don't auto-send data on load\n        // Let the user explicitly trigger data sending via buttons\n        console.log(\n          \"Mini App loaded and ready for keyboard button interaction\"\n        );\n      } catch (err) {\n        setError(`WebApp initialization error: ${err.message}`);\n        console.error(\"WebApp error:\", err);\n      }\n    } else {\n      console.log(\"useEffect: Did NOT detect Telegram WebApp environment.\");\n      setError(\"Not running in Telegram WebApp environment\");\n      console.warn(\"Telegram WebApp not available\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (window.Telegram?.WebApp?.MainButton) {\n        window.Telegram.WebApp.MainButton.offClick(handleSendData);\n        window.Telegram.WebApp.MainButton.hide();\n      }\n    };\n  }, []);\n\n  // called when the main button is clicked (available in telegram only)\n  const handleSendData = () => {\n    console.log(\"handleSendData called\");\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const testData = {\n        message: \"Hello from React Mini App!\",\n        timestamp: new Date().toISOString(),\n        userAction: \"button_click\",\n        event: \"main_button_click\", // Changed event name for clarity\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      // if (count > 0) {\n      try {\n        console.log(\"Attempting to send data via fetch to backend:\", testData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(testData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Data sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"Data sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending data to backend:\", err);\n            setError(`Send error: ${err.message}`);\n            tg.showAlert(`Error: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing data for backend:\", err);\n        setError(`Client-side send error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    } else {\n      console.error(\"Telegram WebApp not available\");\n      setError(\"Telegram WebApp not available\");\n    }\n  };\n\n  const sendCountUpdate = (newCount) => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const countData = {\n        event: \"count_update\",\n        count: newCount,\n        timestamp: new Date().toISOString(),\n        init_data: tg.initData, // Crucial for backend validation and query_id\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Sending count update via fetch to backend:\", countData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(countData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"Count update sent successfully to backend:\", data);\n            // Optionally, provide feedback to the user, though it might be too frequent for count updates\n            // tg.showAlert(data.message || \"Count updated on server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending count update to backend:\", err);\n            // setError might be too intrusive for every count update error\n          });\n      } catch (err) {\n        console.error(\"Error preparing count update for backend:\", err);\n      }\n    }\n  };\n\n  const sendAppLoadedEvent = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const loadData = {\n        event: \"app_loaded\",\n        timestamp: new Date().toISOString(),\n        count: count, // Send current count state\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        console.log(\"Sending app loaded event via fetch to backend:\", loadData);\n        fetch(`${BACKEND_API_ENDPOINT}/api/webapp-data`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(loadData),\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((data) => {\n            console.log(\"App loaded event sent successfully to backend:\", data);\n            tg.showAlert(data.message || \"App loaded event sent to server!\");\n          })\n          .catch((err) => {\n            console.error(\"Error sending app loaded event to backend:\", err);\n            setError(`App load event error: ${err.message}`);\n            tg.showAlert(`Error sending app load event: ${err.message}`);\n          });\n      } catch (err) {\n        console.error(\"Error preparing app loaded event for backend:\", err);\n        setError(`Client-side app load error: ${err.message}`);\n        tg.showAlert(`Client-side error: ${err.message}`);\n      }\n    }\n  };\n\n  const tg =\n    typeof window !== \"undefined\" && window.Telegram && window.Telegram.WebApp\n      ? window.Telegram.WebApp\n      : null;\n\n  // Apply theme-aware styling\n  const appStyle = {\n    backgroundColor: themeParams?.bg_color || \"#ffffff\",\n    color: themeParams?.text_color || \"#000000\",\n    minHeight: \"100vh\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div className=\"App\" style={appStyle}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n\n        {error && (\n          <p style={{ color: themeParams?.destructive_text_color || \"red\" }}>\n            Error: {error}\n          </p>\n        )}\n        {!isReady && !error && <p>Initializing Telegram WebApp...</p>}\n        {isReady && (\n          <p style={{ color: themeParams?.link_color || \"green\" }}>\n            ✅ WebApp Ready!\n          </p>\n        )}\n\n        <div>\n          <p>Count: {count}</p>\n          <button\n            onClick={incrementCount}\n            style={{\n              backgroundColor: themeParams?.secondary_bg_color || \"#f0f0f0\",\n              color: themeParams?.text_color || \"#000000\",\n              border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Increment Count\n          </button>\n\n          {/* <button\n            onClick={sendAppLoadedEvent}\n            style={{\n              backgroundColor: themeParams?.button_color || \"#0088cc\",\n              color: themeParams?.button_text_color || \"#ffffff\",\n              border: \"none\",\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n              margin: \"5px\",\n            }}\n          >\n            Send App Loaded Event\n          </button> */}\n        </div>\n\n        {/* Keyboard Button Mini App Instructions */}\n        <div\n          style={{\n            marginTop: \"20px\",\n            padding: \"15px\",\n            backgroundColor: themeParams?.section_bg_color || \"#e8f4fd\",\n            borderRadius: \"8px\",\n            border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n          }}\n        >\n          <h4\n            style={{\n              margin: \"0 0 10px 0\",\n              color: themeParams?.accent_text_color || \"#0088cc\",\n            }}\n          >\n            🎯 Keyboard Button Mini App\n          </h4>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • All buttons send data using <code>sendData()</code>\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Count updates are sent automatically to bot\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Use the blue button at bottom to send manual data\n          </p>\n          <p style={{ margin: \"5px 0\", fontSize: \"14px\" }}>\n            • Check your bot logs to see data reception\n          </p>\n        </div>\n\n        {tg && (\n          <div\n            style={{\n              marginTop: \"20px\",\n              padding: \"15px\",\n              backgroundColor: themeParams?.secondary_bg_color || \"#f5f5f5\",\n              borderRadius: \"8px\",\n            }}\n          >\n            <h3>WebApp Info:</h3>\n            <p>Telegram WebApp Version: {tg.version}</p>\n            <p>Platform: {tg.platform}</p>\n            {/* Remove displaying user ID from initDataUnsafe - this should be validated server-side */}\n            <p>Init Data Available: {tg.initData ? \"Yes\" : \"No\"}</p>\n            <p>Theme: {tg.colorScheme}</p>\n          </div>\n        )}\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: themeParams?.link_color || \"#0088cc\" }}\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}