{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","App","count","setCount","useState","isReady","setIsReady","error","setError","themeParams","setThemeParams","useEffect","window","Telegram","WebApp","tg","ready","expand","enableClosingConfirmation","MainButton","text","show","onClick","handleSendData","setTimeout","isExpanded","version","initData","JSON","stringify","event","timestamp","Date","toISOString","init_data","platform","console","log","sendData","err","concat","message","warn","_window$Telegram","_window$Telegram$WebA","offClick","hide","testData","userAction","dataStr","showAlert","appStyle","backgroundColor","bg_color","color","text_color","minHeight","padding","React","createElement","className","style","src","logo","alt","destructive_text_color","link_color","button_color","button_text_color","border","borderRadius","fontSize","cursor","margin","incrementCount","prevCount","secondary_bg_color","hint_color","marginTop","colorScheme","href","target","rel","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a61816c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WebApp from \"@twa-dev/sdk\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  const [error, setError] = useState(null);\n  const [themeParams, setThemeParams] = useState(null);\n\n  useEffect(() => {\n    // Check if we're in Telegram Web App environment\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n\n      try {\n        tg.ready();\n\n        // Set up theme\n        setThemeParams(tg.themeParams);\n\n        // Expand the app to full height\n        tg.expand();\n\n        // Enable closing confirmation\n        tg.enableClosingConfirmation();\n\n        // Set up main button\n        tg.MainButton.text = \"Send Data to Bot\";\n        tg.MainButton.show();\n        tg.MainButton.onClick(() => handleSendData());\n\n        setIsReady(true);\n\n        // Wait a bit before sending data to ensure WebApp is fully ready\n        setTimeout(() => {\n          if (tg.isExpanded || tg.version) {\n            const initData = JSON.stringify({\n              event: \"app_loaded\",\n              timestamp: new Date().toISOString(),\n              // Send initData for server-side validation instead of using initDataUnsafe\n              init_data: tg.initData,\n              version: tg.version,\n              platform: tg.platform,\n            });\n            console.log(\"Attempting to send data to bot (on load):\", initData);\n            tg.sendData(initData);\n          }\n        }, 1000);\n      } catch (err) {\n        setError(`WebApp initialization error: ${err.message}`);\n        console.error(\"WebApp error:\", err);\n      }\n    } else {\n      setError(\"Not running in Telegram WebApp environment\");\n      console.warn(\"Telegram WebApp not available\");\n    }\n\n    // Cleanup function\n    return () => {\n      if (window.Telegram?.WebApp?.MainButton) {\n        window.Telegram.WebApp.MainButton.offClick(handleSendData);\n        window.Telegram.WebApp.MainButton.hide();\n      }\n    };\n  }, []);\n\n  const handleSendData = () => {\n    if (\n      typeof window !== \"undefined\" &&\n      window.Telegram &&\n      window.Telegram.WebApp\n    ) {\n      const tg = window.Telegram.WebApp;\n      const testData = {\n        message: \"Hello from React Mini App!\",\n        timestamp: new Date().toISOString(),\n        userAction: \"button_click\",\n        // Send initData for proper server-side validation\n        init_data: tg.initData,\n        version: tg.version,\n        platform: tg.platform,\n      };\n\n      try {\n        const dataStr = JSON.stringify(testData);\n        console.log(\"Attempting to send data from button click:\", dataStr);\n        tg.sendData(dataStr);\n\n        // Also try showing notification\n        tg.showAlert(\"Data sent to bot!\");\n      } catch (err) {\n        console.error(\"Error sending data:\", err);\n        setError(`Send error: ${err.message}`);\n      }\n    } else {\n      console.error(\"Telegram WebApp not available\");\n      setError(\"Telegram WebApp not available\");\n    }\n  };\n\n  const incrementCount = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const tg =\n    typeof window !== \"undefined\" && window.Telegram && window.Telegram.WebApp\n      ? window.Telegram.WebApp\n      : null;\n\n  // Apply theme-aware styling\n  const appStyle = {\n    backgroundColor: themeParams?.bg_color || \"#ffffff\",\n    color: themeParams?.text_color || \"#000000\",\n    minHeight: \"100vh\",\n    padding: \"20px\",\n  };\n\n  return (\n    <div className=\"App\" style={appStyle}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Hello World! This is a Telegram Mini App.</p>\n\n        {error && (\n          <p style={{ color: themeParams?.destructive_text_color || \"red\" }}>\n            Error: {error}\n          </p>\n        )}\n        {!isReady && !error && <p>Initializing Telegram WebApp...</p>}\n        {isReady && (\n          <p style={{ color: themeParams?.link_color || \"green\" }}>\n            âœ… WebApp Ready!\n          </p>\n        )}\n\n        <button\n          onClick={handleSendData}\n          style={{\n            backgroundColor: themeParams?.button_color || \"#0088cc\",\n            color: themeParams?.button_text_color || \"#ffffff\",\n            border: \"none\",\n            padding: \"12px 24px\",\n            borderRadius: \"8px\",\n            fontSize: \"16px\",\n            cursor: \"pointer\",\n            margin: \"10px\",\n          }}\n        >\n          Send Test Data to Backend\n        </button>\n\n        <div>\n          <p>Count: {count}</p>\n          <button\n            onClick={incrementCount}\n            style={{\n              backgroundColor: themeParams?.secondary_bg_color || \"#f0f0f0\",\n              color: themeParams?.text_color || \"#000000\",\n              border: `1px solid ${themeParams?.hint_color || \"#ccc\"}`,\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              cursor: \"pointer\",\n            }}\n          >\n            Increment Count\n          </button>\n        </div>\n\n        {tg && (\n          <div\n            style={{\n              marginTop: \"20px\",\n              padding: \"15px\",\n              backgroundColor: themeParams?.secondary_bg_color || \"#f5f5f5\",\n              borderRadius: \"8px\",\n            }}\n          >\n            <h3>WebApp Info:</h3>\n            <p>Telegram WebApp Version: {tg.version}</p>\n            <p>Platform: {tg.platform}</p>\n            {/* Remove displaying user ID from initDataUnsafe - this should be validated server-side */}\n            <p>Init Data Available: {tg.initData ? \"Yes\" : \"No\"}</p>\n            <p>Theme: {tg.colorScheme}</p>\n          </div>\n        )}\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: themeParams?.link_color || \"#0088cc\" }}\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}